// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout/raw.proto

#include "layout/raw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vlsir {
namespace raw {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/int64_t{0}
  , /*decltype(_impl_.y_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Layer::Layer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/int64_t{0}
  , /*decltype(_impl_.purpose_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerDefaultTypeInternal() {}
  union {
    Layer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerDefaultTypeInternal _Layer_default_instance_;
PROTOBUF_CONSTEXPR Rectangle::Rectangle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.net_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lower_left_)*/nullptr
  , /*decltype(_impl_.width_)*/int64_t{0}
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RectangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectangleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectangleDefaultTypeInternal() {}
  union {
    Rectangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectangleDefaultTypeInternal _Rectangle_default_instance_;
PROTOBUF_CONSTEXPR Polygon::Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.net_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolygonDefaultTypeInternal _Polygon_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.net_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR LayerShapes::LayerShapes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rectangles_)*/{}
  , /*decltype(_impl_.polygons_)*/{}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.layer_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerShapesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerShapesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerShapesDefaultTypeInternal() {}
  union {
    LayerShapes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerShapesDefaultTypeInternal _LayerShapes_default_instance_;
PROTOBUF_CONSTEXPR TextElement::TextElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loc_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextElementDefaultTypeInternal() {}
  union {
    TextElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextElementDefaultTypeInternal _TextElement_default_instance_;
PROTOBUF_CONSTEXPR Instance::Instance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.origin_location_)*/nullptr
  , /*decltype(_impl_.reflect_vert_)*/false
  , /*decltype(_impl_.rotation_clockwise_degrees_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceDefaultTypeInternal _Instance_default_instance_;
PROTOBUF_CONSTEXPR Layout::Layout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shapes_)*/{}
  , /*decltype(_impl_.instances_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutDefaultTypeInternal() {}
  union {
    Layout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutDefaultTypeInternal _Layout_default_instance_;
PROTOBUF_CONSTEXPR Abstract::Abstract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.blockages_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outline_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbstractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbstractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbstractDefaultTypeInternal() {}
  union {
    Abstract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbstractDefaultTypeInternal _Abstract_default_instance_;
PROTOBUF_CONSTEXPR AbstractPort::AbstractPort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shapes_)*/{}
  , /*decltype(_impl_.net_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbstractPortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbstractPortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbstractPortDefaultTypeInternal() {}
  union {
    AbstractPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbstractPortDefaultTypeInternal _AbstractPort_default_instance_;
PROTOBUF_CONSTEXPR Cell::Cell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interface_)*/nullptr
  , /*decltype(_impl_.module_)*/nullptr
  , /*decltype(_impl_.abstract_)*/nullptr
  , /*decltype(_impl_.layout_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDefaultTypeInternal() {}
  union {
    Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDefaultTypeInternal _Cell_default_instance_;
PROTOBUF_CONSTEXPR Library::Library(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.units_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LibraryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibraryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibraryDefaultTypeInternal() {}
  union {
    Library _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibraryDefaultTypeInternal _Library_default_instance_;
}  // namespace raw
}  // namespace vlsir
static ::_pb::Metadata file_level_metadata_layout_2fraw_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_layout_2fraw_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_layout_2fraw_2eproto = nullptr;

const uint32_t TableStruct_layout_2fraw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, _impl_.purpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _impl_.net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _impl_.lower_left_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, _impl_.net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, _impl_.vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, _impl_.net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, _impl_.width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _impl_.rectangles_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _impl_.polygons_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _impl_.paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, _impl_.string_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, _impl_.loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _impl_.origin_location_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _impl_.reflect_vert_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _impl_.rotation_clockwise_degrees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _impl_.shapes_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _impl_.instances_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _impl_.outline_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _impl_.ports_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _impl_.blockages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, _impl_.net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, _impl_.shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _impl_.interface_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _impl_.abstract_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _impl_.layout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _impl_.cells_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _impl_.author_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vlsir::raw::Point)},
  { 8, -1, -1, sizeof(::vlsir::raw::Layer)},
  { 16, -1, -1, sizeof(::vlsir::raw::Rectangle)},
  { 26, -1, -1, sizeof(::vlsir::raw::Polygon)},
  { 34, -1, -1, sizeof(::vlsir::raw::Path)},
  { 43, -1, -1, sizeof(::vlsir::raw::LayerShapes)},
  { 53, -1, -1, sizeof(::vlsir::raw::TextElement)},
  { 61, -1, -1, sizeof(::vlsir::raw::Instance)},
  { 72, -1, -1, sizeof(::vlsir::raw::Layout)},
  { 82, -1, -1, sizeof(::vlsir::raw::Abstract)},
  { 92, -1, -1, sizeof(::vlsir::raw::AbstractPort)},
  { 100, -1, -1, sizeof(::vlsir::raw::Cell)},
  { 111, -1, -1, sizeof(::vlsir::raw::Library)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vlsir::raw::_Point_default_instance_._instance,
  &::vlsir::raw::_Layer_default_instance_._instance,
  &::vlsir::raw::_Rectangle_default_instance_._instance,
  &::vlsir::raw::_Polygon_default_instance_._instance,
  &::vlsir::raw::_Path_default_instance_._instance,
  &::vlsir::raw::_LayerShapes_default_instance_._instance,
  &::vlsir::raw::_TextElement_default_instance_._instance,
  &::vlsir::raw::_Instance_default_instance_._instance,
  &::vlsir::raw::_Layout_default_instance_._instance,
  &::vlsir::raw::_Abstract_default_instance_._instance,
  &::vlsir::raw::_AbstractPort_default_instance_._instance,
  &::vlsir::raw::_Cell_default_instance_._instance,
  &::vlsir::raw::_Library_default_instance_._instance,
};

const char descriptor_table_protodef_layout_2fraw_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020layout/raw.proto\022\tvlsir.raw\032\013utils.pro"
  "to\032\rcircuit.proto\"\035\n\005Point\022\t\n\001x\030\001 \001(\003\022\t\n"
  "\001y\030\002 \001(\003\"(\n\005Layer\022\016\n\006number\030\001 \001(\003\022\017\n\007pur"
  "pose\030\002 \001(\003\"]\n\tRectangle\022\013\n\003net\030\001 \001(\t\022$\n\n"
  "lower_left\030\002 \001(\0132\020.vlsir.raw.Point\022\r\n\005wi"
  "dth\030\003 \001(\003\022\016\n\006height\030\004 \001(\003\":\n\007Polygon\022\013\n\003"
  "net\030\001 \001(\t\022\"\n\010vertices\030\002 \003(\0132\020.vlsir.raw."
  "Point\"D\n\004Path\022\013\n\003net\030\001 \001(\t\022 \n\006points\030\002 \003"
  "(\0132\020.vlsir.raw.Point\022\r\n\005width\030\003 \001(\003\"\236\001\n\013"
  "LayerShapes\022\037\n\005layer\030\001 \001(\0132\020.vlsir.raw.L"
  "ayer\022(\n\nrectangles\030\002 \003(\0132\024.vlsir.raw.Rec"
  "tangle\022$\n\010polygons\030\003 \003(\0132\022.vlsir.raw.Pol"
  "ygon\022\036\n\005paths\030\004 \003(\0132\017.vlsir.raw.Path\"<\n\013"
  "TextElement\022\016\n\006string\030\001 \001(\t\022\035\n\003loc\030\002 \001(\013"
  "2\020.vlsir.raw.Point\"\243\001\n\010Instance\022\014\n\004name\030"
  "\001 \001(\t\022$\n\004cell\030\003 \001(\0132\026.vlsir.utils.Refere"
  "nce\022)\n\017origin_location\030\004 \001(\0132\020.vlsir.raw"
  ".Point\022\024\n\014reflect_vert\030\006 \001(\010\022\"\n\032rotation"
  "_clockwise_degrees\030\007 \001(\005\"\223\001\n\006Layout\022\014\n\004n"
  "ame\030\001 \001(\t\022&\n\006shapes\030\002 \003(\0132\026.vlsir.raw.La"
  "yerShapes\022&\n\tinstances\030\003 \003(\0132\023.vlsir.raw"
  ".Instance\022+\n\013annotations\030\004 \003(\0132\026.vlsir.r"
  "aw.TextElement\"\220\001\n\010Abstract\022\014\n\004name\030\001 \001("
  "\t\022#\n\007outline\030\002 \001(\0132\022.vlsir.raw.Polygon\022&"
  "\n\005ports\030\004 \003(\0132\027.vlsir.raw.AbstractPort\022)"
  "\n\tblockages\030\005 \003(\0132\026.vlsir.raw.LayerShape"
  "s\"C\n\014AbstractPort\022\013\n\003net\030\001 \001(\t\022&\n\006shapes"
  "\030\002 \003(\0132\026.vlsir.raw.LayerShapes\"\262\001\n\004Cell\022"
  "\014\n\004name\030\001 \001(\t\022+\n\tinterface\030\n \001(\0132\030.vlsir"
  ".circuit.Interface\022%\n\006module\030\013 \001(\0132\025.vls"
  "ir.circuit.Module\022%\n\010abstract\030\014 \001(\0132\023.vl"
  "sir.raw.Abstract\022!\n\006layout\030\r \001(\0132\021.vlsir"
  ".raw.Layout\"\207\001\n\007Library\022\016\n\006domain\030\001 \001(\t\022"
  "\037\n\005units\030\002 \001(\0162\020.vlsir.raw.Units\022\036\n\005cell"
  "s\030\n \003(\0132\017.vlsir.raw.Cell\022+\n\006author\030\024 \001(\013"
  "2\033.vlsir.utils.AuthorMetadata**\n\005Units\022\t"
  "\n\005MICRO\020\000\022\010\n\004NANO\020\001\022\014\n\010ANGSTROM\020\002b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_layout_2fraw_2eproto_deps[2] = {
  &::descriptor_table_circuit_2eproto,
  &::descriptor_table_utils_2eproto,
};
static ::_pbi::once_flag descriptor_table_layout_2fraw_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_layout_2fraw_2eproto = {
    false, false, 1481, descriptor_table_protodef_layout_2fraw_2eproto,
    "layout/raw.proto",
    &descriptor_table_layout_2fraw_2eproto_once, descriptor_table_layout_2fraw_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_layout_2fraw_2eproto::offsets,
    file_level_metadata_layout_2fraw_2eproto, file_level_enum_descriptors_layout_2fraw_2eproto,
    file_level_service_descriptors_layout_2fraw_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_layout_2fraw_2eproto_getter() {
  return &descriptor_table_layout_2fraw_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_layout_2fraw_2eproto(&descriptor_table_layout_2fraw_2eproto);
namespace vlsir {
namespace raw {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Units_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_layout_2fraw_2eproto);
  return file_level_enum_descriptors_layout_2fraw_2eproto[0];
}
bool Units_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){int64_t{0}}
    , decltype(_impl_.y_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[0]);
}

// ===================================================================

class Layer::_Internal {
 public:
};

Layer::Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Layer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.purpose_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.purpose_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.purpose_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Layer)
}

inline void Layer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){int64_t{0}}
    , decltype(_impl_.purpose_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Layer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Layer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Layer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.purpose_) -
      reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.purpose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 purpose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.purpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Layer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Layer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_number(), target);
  }

  // int64 purpose = 2;
  if (this->_internal_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Layer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_number());
  }

  // int64 purpose = 2;
  if (this->_internal_purpose() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Layer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Layer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Layer::GetClassData() const { return &_class_data_; }


void Layer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Layer*>(&to_msg);
  auto& from = static_cast<const Layer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Layer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_purpose() != 0) {
    _this->_internal_set_purpose(from._internal_purpose());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Layer, _impl_.purpose_)
      + sizeof(Layer::_impl_.purpose_)
      - PROTOBUF_FIELD_OFFSET(Layer, _impl_.number_)>(
          reinterpret_cast<char*>(&_impl_.number_),
          reinterpret_cast<char*>(&other->_impl_.number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[1]);
}

// ===================================================================

class Rectangle::_Internal {
 public:
  static const ::vlsir::raw::Point& lower_left(const Rectangle* msg);
};

const ::vlsir::raw::Point&
Rectangle::_Internal::lower_left(const Rectangle* msg) {
  return *msg->_impl_.lower_left_;
}
Rectangle::Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rectangle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.net_){}
    , decltype(_impl_.lower_left_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    _this->_impl_.net_.Set(from._internal_net(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lower_left()) {
    _this->_impl_.lower_left_ = new ::vlsir::raw::Point(*from._impl_.lower_left_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Rectangle)
}

inline void Rectangle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.net_){}
    , decltype(_impl_.lower_left_){nullptr}
    , decltype(_impl_.width_){int64_t{0}}
    , decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Rectangle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rectangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.net_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lower_left_;
}

void Rectangle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Rectangle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.net_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.lower_left_ != nullptr) {
    delete _impl_.lower_left_;
  }
  _impl_.lower_left_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rectangle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Rectangle.net"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point lower_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rectangle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Rectangle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Rectangle.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // .vlsir.raw.Point lower_left = 2;
  if (this->_internal_has_lower_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lower_left(this),
        _Internal::lower_left(this).GetCachedSize(), target, stream);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  // int64 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Rectangle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  // .vlsir.raw.Point lower_left = 2;
  if (this->_internal_has_lower_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lower_left_);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  // int64 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rectangle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rectangle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rectangle::GetClassData() const { return &_class_data_; }


void Rectangle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rectangle*>(&to_msg);
  auto& from = static_cast<const Rectangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Rectangle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_net().empty()) {
    _this->_internal_set_net(from._internal_net());
  }
  if (from._internal_has_lower_left()) {
    _this->_internal_mutable_lower_left()->::vlsir::raw::Point::MergeFrom(
        from._internal_lower_left());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_, lhs_arena,
      &other->_impl_.net_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.height_)
      + sizeof(Rectangle::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.lower_left_)>(
          reinterpret_cast<char*>(&_impl_.lower_left_),
          reinterpret_cast<char*>(&other->_impl_.lower_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[2]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.net_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    _this->_impl_.net_.Set(from._internal_net(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Polygon)
}

inline void Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.net_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.net_.Destroy();
}

void Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.net_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Polygon.net"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Point vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Polygon.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.Point vertices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Point vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }


void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon*>(&to_msg);
  auto& from = static_cast<const Polygon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  if (!from._internal_net().empty()) {
    _this->_internal_set_net(from._internal_net());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_, lhs_arena,
      &other->_impl_.net_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[3]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.net_){}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    _this->_impl_.net_.Set(from._internal_net(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.width_ = from._impl_.width_;
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Path)
}

inline void Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.net_){}
    , decltype(_impl_.width_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.net_.Destroy();
}

void Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.net_.ClearToEmpty();
  _impl_.width_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Path.net"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Point points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Path.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.Point points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Point points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }


void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path*>(&to_msg);
  auto& from = static_cast<const Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (!from._internal_net().empty()) {
    _this->_internal_set_net(from._internal_net());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_, lhs_arena,
      &other->_impl_.net_, rhs_arena
  );
  swap(_impl_.width_, other->_impl_.width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[4]);
}

// ===================================================================

class LayerShapes::_Internal {
 public:
  static const ::vlsir::raw::Layer& layer(const LayerShapes* msg);
};

const ::vlsir::raw::Layer&
LayerShapes::_Internal::layer(const LayerShapes* msg) {
  return *msg->_impl_.layer_;
}
LayerShapes::LayerShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.LayerShapes)
}
LayerShapes::LayerShapes(const LayerShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerShapes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rectangles_){from._impl_.rectangles_}
    , decltype(_impl_.polygons_){from._impl_.polygons_}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.layer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layer()) {
    _this->_impl_.layer_ = new ::vlsir::raw::Layer(*from._impl_.layer_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.LayerShapes)
}

inline void LayerShapes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rectangles_){arena}
    , decltype(_impl_.polygons_){arena}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.layer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LayerShapes::~LayerShapes() {
  // @@protoc_insertion_point(destructor:vlsir.raw.LayerShapes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rectangles_.~RepeatedPtrField();
  _impl_.polygons_.~RepeatedPtrField();
  _impl_.paths_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.layer_;
}

void LayerShapes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.LayerShapes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rectangles_.Clear();
  _impl_.polygons_.Clear();
  _impl_.paths_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.layer_ != nullptr) {
    delete _impl_.layer_;
  }
  _impl_.layer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerShapes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vlsir.raw.Layer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Rectangle rectangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rectangles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Polygon polygons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Path paths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerShapes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.LayerShapes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.raw.Layer layer = 1;
  if (this->_internal_has_layer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::layer(this),
        _Internal::layer(this).GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.Rectangle rectangles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rectangles_size()); i < n; i++) {
    const auto& repfield = this->_internal_rectangles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.Polygon polygons = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygons_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.Path paths = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.LayerShapes)
  return target;
}

size_t LayerShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.LayerShapes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Rectangle rectangles = 2;
  total_size += 1UL * this->_internal_rectangles_size();
  for (const auto& msg : this->_impl_.rectangles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Polygon polygons = 3;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->_impl_.polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Path paths = 4;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vlsir.raw.Layer layer = 1;
  if (this->_internal_has_layer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerShapes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerShapes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerShapes::GetClassData() const { return &_class_data_; }


void LayerShapes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerShapes*>(&to_msg);
  auto& from = static_cast<const LayerShapes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.LayerShapes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rectangles_.MergeFrom(from._impl_.rectangles_);
  _this->_impl_.polygons_.MergeFrom(from._impl_.polygons_);
  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  if (from._internal_has_layer()) {
    _this->_internal_mutable_layer()->::vlsir::raw::Layer::MergeFrom(
        from._internal_layer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerShapes::CopyFrom(const LayerShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.LayerShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerShapes::IsInitialized() const {
  return true;
}

void LayerShapes::InternalSwap(LayerShapes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rectangles_.InternalSwap(&other->_impl_.rectangles_);
  _impl_.polygons_.InternalSwap(&other->_impl_.polygons_);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  swap(_impl_.layer_, other->_impl_.layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerShapes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[5]);
}

// ===================================================================

class TextElement::_Internal {
 public:
  static const ::vlsir::raw::Point& loc(const TextElement* msg);
};

const ::vlsir::raw::Point&
TextElement::_Internal::loc(const TextElement* msg) {
  return *msg->_impl_.loc_;
}
TextElement::TextElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.TextElement)
}
TextElement::TextElement(const TextElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.string_){}
    , decltype(_impl_.loc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_string().empty()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_loc()) {
    _this->_impl_.loc_ = new ::vlsir::raw::Point(*from._impl_.loc_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.TextElement)
}

inline void TextElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.string_){}
    , decltype(_impl_.loc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextElement::~TextElement() {
  // @@protoc_insertion_point(destructor:vlsir.raw.TextElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.loc_;
}

void TextElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextElement::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.TextElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.loc_ != nullptr) {
    delete _impl_.loc_;
  }
  _impl_.loc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.TextElement.string"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.TextElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string = 1;
  if (!this->_internal_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.TextElement.string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string(), target);
  }

  // .vlsir.raw.Point loc = 2;
  if (this->_internal_has_loc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loc(this),
        _Internal::loc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.TextElement)
  return target;
}

size_t TextElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.TextElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string = 1;
  if (!this->_internal_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());
  }

  // .vlsir.raw.Point loc = 2;
  if (this->_internal_has_loc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextElement::GetClassData() const { return &_class_data_; }


void TextElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextElement*>(&to_msg);
  auto& from = static_cast<const TextElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.TextElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_string().empty()) {
    _this->_internal_set_string(from._internal_string());
  }
  if (from._internal_has_loc()) {
    _this->_internal_mutable_loc()->::vlsir::raw::Point::MergeFrom(
        from._internal_loc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextElement::CopyFrom(const TextElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.TextElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextElement::IsInitialized() const {
  return true;
}

void TextElement::InternalSwap(TextElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  swap(_impl_.loc_, other->_impl_.loc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[6]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::vlsir::utils::Reference& cell(const Instance* msg);
  static const ::vlsir::raw::Point& origin_location(const Instance* msg);
};

const ::vlsir::utils::Reference&
Instance::_Internal::cell(const Instance* msg) {
  return *msg->_impl_.cell_;
}
const ::vlsir::raw::Point&
Instance::_Internal::origin_location(const Instance* msg) {
  return *msg->_impl_.origin_location_;
}
void Instance::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.origin_location_){nullptr}
    , decltype(_impl_.reflect_vert_){}
    , decltype(_impl_.rotation_clockwise_degrees_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::vlsir::utils::Reference(*from._impl_.cell_);
  }
  if (from._internal_has_origin_location()) {
    _this->_impl_.origin_location_ = new ::vlsir::raw::Point(*from._impl_.origin_location_);
  }
  ::memcpy(&_impl_.reflect_vert_, &from._impl_.reflect_vert_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotation_clockwise_degrees_) -
    reinterpret_cast<char*>(&_impl_.reflect_vert_)) + sizeof(_impl_.rotation_clockwise_degrees_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Instance)
}

inline void Instance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.origin_location_){nullptr}
    , decltype(_impl_.reflect_vert_){false}
    , decltype(_impl_.rotation_clockwise_degrees_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cell_;
  if (this != internal_default_instance()) delete _impl_.origin_location_;
}

void Instance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.origin_location_ != nullptr) {
    delete _impl_.origin_location_;
  }
  _impl_.origin_location_ = nullptr;
  ::memset(&_impl_.reflect_vert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotation_clockwise_degrees_) -
      reinterpret_cast<char*>(&_impl_.reflect_vert_)) + sizeof(_impl_.rotation_clockwise_degrees_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Instance.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.Reference cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point origin_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reflect_vert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.reflect_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotation_clockwise_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rotation_clockwise_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Instance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.utils.Reference cell = 3;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // .vlsir.raw.Point origin_location = 4;
  if (this->_internal_has_origin_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::origin_location(this),
        _Internal::origin_location(this).GetCachedSize(), target, stream);
  }

  // bool reflect_vert = 6;
  if (this->_internal_reflect_vert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_reflect_vert(), target);
  }

  // int32 rotation_clockwise_degrees = 7;
  if (this->_internal_rotation_clockwise_degrees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_rotation_clockwise_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.utils.Reference cell = 3;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // .vlsir.raw.Point origin_location = 4;
  if (this->_internal_has_origin_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_location_);
  }

  // bool reflect_vert = 6;
  if (this->_internal_reflect_vert() != 0) {
    total_size += 1 + 1;
  }

  // int32 rotation_clockwise_degrees = 7;
  if (this->_internal_rotation_clockwise_degrees() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation_clockwise_degrees());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }


void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instance*>(&to_msg);
  auto& from = static_cast<const Instance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Instance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::vlsir::utils::Reference::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_has_origin_location()) {
    _this->_internal_mutable_origin_location()->::vlsir::raw::Point::MergeFrom(
        from._internal_origin_location());
  }
  if (from._internal_reflect_vert() != 0) {
    _this->_internal_set_reflect_vert(from._internal_reflect_vert());
  }
  if (from._internal_rotation_clockwise_degrees() != 0) {
    _this->_internal_set_rotation_clockwise_degrees(from._internal_rotation_clockwise_degrees());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instance, _impl_.rotation_clockwise_degrees_)
      + sizeof(Instance::_impl_.rotation_clockwise_degrees_)
      - PROTOBUF_FIELD_OFFSET(Instance, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[7]);
}

// ===================================================================

class Layout::_Internal {
 public:
};

Layout::Layout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Layout)
}
Layout::Layout(const Layout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Layout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){from._impl_.shapes_}
    , decltype(_impl_.instances_){from._impl_.instances_}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Layout)
}

inline void Layout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){arena}
    , decltype(_impl_.instances_){arena}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Layout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Layout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shapes_.~RepeatedPtrField();
  _impl_.instances_.~RepeatedPtrField();
  _impl_.annotations_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Layout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Layout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shapes_.Clear();
  _impl_.instances_.Clear();
  _impl_.annotations_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Layout.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Instance instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.TextElement annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Layout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Layout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Layout.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_shapes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.Instance instances = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instances_size()); i < n; i++) {
    const auto& repfield = this->_internal_instances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.TextElement annotations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Layout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->_impl_.shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Instance instances = 3;
  total_size += 1UL * this->_internal_instances_size();
  for (const auto& msg : this->_impl_.instances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.TextElement annotations = 4;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Layout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Layout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Layout::GetClassData() const { return &_class_data_; }


void Layout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Layout*>(&to_msg);
  auto& from = static_cast<const Layout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Layout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shapes_.MergeFrom(from._impl_.shapes_);
  _this->_impl_.instances_.MergeFrom(from._impl_.instances_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::InternalSwap(Layout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shapes_.InternalSwap(&other->_impl_.shapes_);
  _impl_.instances_.InternalSwap(&other->_impl_.instances_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Layout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[8]);
}

// ===================================================================

class Abstract::_Internal {
 public:
  static const ::vlsir::raw::Polygon& outline(const Abstract* msg);
};

const ::vlsir::raw::Polygon&
Abstract::_Internal::outline(const Abstract* msg) {
  return *msg->_impl_.outline_;
}
Abstract::Abstract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Abstract)
}
Abstract::Abstract(const Abstract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Abstract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.blockages_){from._impl_.blockages_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.outline_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_outline()) {
    _this->_impl_.outline_ = new ::vlsir::raw::Polygon(*from._impl_.outline_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Abstract)
}

inline void Abstract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.blockages_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.outline_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Abstract::~Abstract() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Abstract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Abstract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
  _impl_.blockages_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.outline_;
}

void Abstract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Abstract::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Abstract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  _impl_.blockages_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.outline_ != nullptr) {
    delete _impl_.outline_;
  }
  _impl_.outline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Abstract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Abstract.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Polygon outline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.AbstractPort ports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes blockages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blockages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Abstract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Abstract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Abstract.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.raw.Polygon outline = 2;
  if (this->_internal_has_outline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::outline(this),
        _Internal::outline(this).GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.AbstractPort ports = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.raw.LayerShapes blockages = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blockages_size()); i < n; i++) {
    const auto& repfield = this->_internal_blockages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Abstract)
  return target;
}

size_t Abstract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Abstract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.AbstractPort ports = 4;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.LayerShapes blockages = 5;
  total_size += 1UL * this->_internal_blockages_size();
  for (const auto& msg : this->_impl_.blockages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.raw.Polygon outline = 2;
  if (this->_internal_has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Abstract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Abstract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Abstract::GetClassData() const { return &_class_data_; }


void Abstract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Abstract*>(&to_msg);
  auto& from = static_cast<const Abstract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Abstract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  _this->_impl_.blockages_.MergeFrom(from._impl_.blockages_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_outline()) {
    _this->_internal_mutable_outline()->::vlsir::raw::Polygon::MergeFrom(
        from._internal_outline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Abstract::CopyFrom(const Abstract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Abstract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abstract::IsInitialized() const {
  return true;
}

void Abstract::InternalSwap(Abstract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  _impl_.blockages_.InternalSwap(&other->_impl_.blockages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.outline_, other->_impl_.outline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Abstract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[9]);
}

// ===================================================================

class AbstractPort::_Internal {
 public:
};

AbstractPort::AbstractPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.AbstractPort)
}
AbstractPort::AbstractPort(const AbstractPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbstractPort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){from._impl_.shapes_}
    , decltype(_impl_.net_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    _this->_impl_.net_.Set(from._internal_net(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.AbstractPort)
}

inline void AbstractPort::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){arena}
    , decltype(_impl_.net_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AbstractPort::~AbstractPort() {
  // @@protoc_insertion_point(destructor:vlsir.raw.AbstractPort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbstractPort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shapes_.~RepeatedPtrField();
  _impl_.net_.Destroy();
}

void AbstractPort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbstractPort::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.AbstractPort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shapes_.Clear();
  _impl_.net_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractPort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.AbstractPort.net"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbstractPort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.AbstractPort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.AbstractPort.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_shapes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.AbstractPort)
  return target;
}

size_t AbstractPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.AbstractPort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->_impl_.shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbstractPort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbstractPort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbstractPort::GetClassData() const { return &_class_data_; }


void AbstractPort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbstractPort*>(&to_msg);
  auto& from = static_cast<const AbstractPort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.AbstractPort)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shapes_.MergeFrom(from._impl_.shapes_);
  if (!from._internal_net().empty()) {
    _this->_internal_set_net(from._internal_net());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbstractPort::CopyFrom(const AbstractPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.AbstractPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractPort::IsInitialized() const {
  return true;
}

void AbstractPort::InternalSwap(AbstractPort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shapes_.InternalSwap(&other->_impl_.shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_, lhs_arena,
      &other->_impl_.net_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractPort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[10]);
}

// ===================================================================

class Cell::_Internal {
 public:
  static const ::vlsir::circuit::Interface& interface(const Cell* msg);
  static const ::vlsir::circuit::Module& module(const Cell* msg);
  static const ::vlsir::raw::Abstract& abstract(const Cell* msg);
  static const ::vlsir::raw::Layout& layout(const Cell* msg);
};

const ::vlsir::circuit::Interface&
Cell::_Internal::interface(const Cell* msg) {
  return *msg->_impl_.interface_;
}
const ::vlsir::circuit::Module&
Cell::_Internal::module(const Cell* msg) {
  return *msg->_impl_.module_;
}
const ::vlsir::raw::Abstract&
Cell::_Internal::abstract(const Cell* msg) {
  return *msg->_impl_.abstract_;
}
const ::vlsir::raw::Layout&
Cell::_Internal::layout(const Cell* msg) {
  return *msg->_impl_.layout_;
}
void Cell::clear_interface() {
  if (GetArenaForAllocation() == nullptr && _impl_.interface_ != nullptr) {
    delete _impl_.interface_;
  }
  _impl_.interface_ = nullptr;
}
void Cell::clear_module() {
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.interface_){nullptr}
    , decltype(_impl_.module_){nullptr}
    , decltype(_impl_.abstract_){nullptr}
    , decltype(_impl_.layout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interface()) {
    _this->_impl_.interface_ = new ::vlsir::circuit::Interface(*from._impl_.interface_);
  }
  if (from._internal_has_module()) {
    _this->_impl_.module_ = new ::vlsir::circuit::Module(*from._impl_.module_);
  }
  if (from._internal_has_abstract()) {
    _this->_impl_.abstract_ = new ::vlsir::raw::Abstract(*from._impl_.abstract_);
  }
  if (from._internal_has_layout()) {
    _this->_impl_.layout_ = new ::vlsir::raw::Layout(*from._impl_.layout_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Cell)
}

inline void Cell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.interface_){nullptr}
    , decltype(_impl_.module_){nullptr}
    , decltype(_impl_.abstract_){nullptr}
    , decltype(_impl_.layout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Cell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interface_;
  if (this != internal_default_instance()) delete _impl_.module_;
  if (this != internal_default_instance()) delete _impl_.abstract_;
  if (this != internal_default_instance()) delete _impl_.layout_;
}

void Cell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Cell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interface_ != nullptr) {
    delete _impl_.interface_;
  }
  _impl_.interface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.abstract_ != nullptr) {
    delete _impl_.abstract_;
  }
  _impl_.abstract_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layout_ != nullptr) {
    delete _impl_.layout_;
  }
  _impl_.layout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Cell.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Interface interface = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Module module = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Abstract abstract = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_abstract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Layout layout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Cell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Cell.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.circuit.Interface interface = 10;
  if (this->_internal_has_interface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::interface(this),
        _Internal::interface(this).GetCachedSize(), target, stream);
  }

  // .vlsir.circuit.Module module = 11;
  if (this->_internal_has_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::module(this),
        _Internal::module(this).GetCachedSize(), target, stream);
  }

  // .vlsir.raw.Abstract abstract = 12;
  if (this->_internal_has_abstract()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::abstract(this),
        _Internal::abstract(this).GetCachedSize(), target, stream);
  }

  // .vlsir.raw.Layout layout = 13;
  if (this->_internal_has_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::layout(this),
        _Internal::layout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Cell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.circuit.Interface interface = 10;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interface_);
  }

  // .vlsir.circuit.Module module = 11;
  if (this->_internal_has_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_);
  }

  // .vlsir.raw.Abstract abstract = 12;
  if (this->_internal_has_abstract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.abstract_);
  }

  // .vlsir.raw.Layout layout = 13;
  if (this->_internal_has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cell::GetClassData() const { return &_class_data_; }


void Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cell*>(&to_msg);
  auto& from = static_cast<const Cell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Cell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_interface()) {
    _this->_internal_mutable_interface()->::vlsir::circuit::Interface::MergeFrom(
        from._internal_interface());
  }
  if (from._internal_has_module()) {
    _this->_internal_mutable_module()->::vlsir::circuit::Module::MergeFrom(
        from._internal_module());
  }
  if (from._internal_has_abstract()) {
    _this->_internal_mutable_abstract()->::vlsir::raw::Abstract::MergeFrom(
        from._internal_abstract());
  }
  if (from._internal_has_layout()) {
    _this->_internal_mutable_layout()->::vlsir::raw::Layout::MergeFrom(
        from._internal_layout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, _impl_.layout_)
      + sizeof(Cell::_impl_.layout_)
      - PROTOBUF_FIELD_OFFSET(Cell, _impl_.interface_)>(
          reinterpret_cast<char*>(&_impl_.interface_),
          reinterpret_cast<char*>(&other->_impl_.interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[11]);
}

// ===================================================================

class Library::_Internal {
 public:
  static const ::vlsir::utils::AuthorMetadata& author(const Library* msg);
};

const ::vlsir::utils::AuthorMetadata&
Library::_Internal::author(const Library* msg) {
  return *msg->_impl_.author_;
}
void Library::clear_author() {
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
}
Library::Library(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Library)
}
Library::Library(const Library& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Library* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.units_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::vlsir::utils::AuthorMetadata(*from._impl_.author_);
  }
  _this->_impl_.units_ = from._impl_.units_;
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Library)
}

inline void Library::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){arena}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.units_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Library::~Library() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Library)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Library::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cells_.~RepeatedPtrField();
  _impl_.domain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void Library::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Library::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Library)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cells_.Clear();
  _impl_.domain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _impl_.units_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Library::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.raw.Library.domain"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Units units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_units(static_cast<::vlsir::raw::Units>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Cell cells = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.AuthorMetadata author = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Library::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Library)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Library.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // .vlsir.raw.Units units = 2;
  if (this->_internal_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_units(), target);
  }

  // repeated .vlsir.raw.Cell cells = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Library)
  return target;
}

size_t Library::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Library)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Cell cells = 10;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_impl_.cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  // .vlsir.raw.Units units = 2;
  if (this->_internal_units() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_units());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Library::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Library::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Library::GetClassData() const { return &_class_data_; }


void Library::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Library*>(&to_msg);
  auto& from = static_cast<const Library&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Library)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cells_.MergeFrom(from._impl_.cells_);
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::vlsir::utils::AuthorMetadata::MergeFrom(
        from._internal_author());
  }
  if (from._internal_units() != 0) {
    _this->_internal_set_units(from._internal_units());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Library::CopyFrom(const Library& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library::IsInitialized() const {
  return true;
}

void Library::InternalSwap(Library* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Library, _impl_.units_)
      + sizeof(Library::_impl_.units_)
      - PROTOBUF_FIELD_OFFSET(Library, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Library::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raw
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::raw::Point*
Arena::CreateMaybeMessage< ::vlsir::raw::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Layer*
Arena::CreateMaybeMessage< ::vlsir::raw::Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Rectangle*
Arena::CreateMaybeMessage< ::vlsir::raw::Rectangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Polygon*
Arena::CreateMaybeMessage< ::vlsir::raw::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Path*
Arena::CreateMaybeMessage< ::vlsir::raw::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::LayerShapes*
Arena::CreateMaybeMessage< ::vlsir::raw::LayerShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::LayerShapes >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::TextElement*
Arena::CreateMaybeMessage< ::vlsir::raw::TextElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::TextElement >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Instance*
Arena::CreateMaybeMessage< ::vlsir::raw::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Layout*
Arena::CreateMaybeMessage< ::vlsir::raw::Layout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Layout >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Abstract*
Arena::CreateMaybeMessage< ::vlsir::raw::Abstract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Abstract >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::AbstractPort*
Arena::CreateMaybeMessage< ::vlsir::raw::AbstractPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::AbstractPort >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Cell*
Arena::CreateMaybeMessage< ::vlsir::raw::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Library*
Arena::CreateMaybeMessage< ::vlsir::raw::Library >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Library >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

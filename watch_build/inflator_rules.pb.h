// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inflator_rules.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inflator_5frules_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inflator_5frules_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inflator_5frules_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inflator_5frules_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inflator_5frules_2eproto;
namespace bfg {
namespace proto {
class InflatorRules;
struct InflatorRulesDefaultTypeInternal;
extern InflatorRulesDefaultTypeInternal _InflatorRules_default_instance_;
class LayerRules;
struct LayerRulesDefaultTypeInternal;
extern LayerRulesDefaultTypeInternal _LayerRules_default_instance_;
}  // namespace proto
}  // namespace bfg
PROTOBUF_NAMESPACE_OPEN
template<> ::bfg::proto::InflatorRules* Arena::CreateMaybeMessage<::bfg::proto::InflatorRules>(Arena*);
template<> ::bfg::proto::LayerRules* Arena::CreateMaybeMessage<::bfg::proto::LayerRules>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bfg {
namespace proto {

// ===================================================================

class LayerRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bfg.proto.LayerRules) */ {
 public:
  inline LayerRules() : LayerRules(nullptr) {}
  ~LayerRules() override;
  explicit PROTOBUF_CONSTEXPR LayerRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerRules(const LayerRules& from);
  LayerRules(LayerRules&& from) noexcept
    : LayerRules() {
    *this = ::std::move(from);
  }

  inline LayerRules& operator=(const LayerRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerRules& operator=(LayerRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerRules* internal_default_instance() {
    return reinterpret_cast<const LayerRules*>(
               &_LayerRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayerRules& a, LayerRules& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerRules* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LayerRules& from) {
    LayerRules::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerRules* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bfg.proto.LayerRules";
  }
  protected:
  explicit LayerRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
    kDefaultWidthFieldNumber = 100,
  };
  // uint64 layer = 1;
  void clear_layer();
  uint64_t layer() const;
  void set_layer(uint64_t value);
  private:
  uint64_t _internal_layer() const;
  void _internal_set_layer(uint64_t value);
  public:

  // uint64 default_width = 100;
  void clear_default_width();
  uint64_t default_width() const;
  void set_default_width(uint64_t value);
  private:
  uint64_t _internal_default_width() const;
  void _internal_set_default_width(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bfg.proto.LayerRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t layer_;
    uint64_t default_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inflator_5frules_2eproto;
};
// -------------------------------------------------------------------

class InflatorRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bfg.proto.InflatorRules) */ {
 public:
  inline InflatorRules() : InflatorRules(nullptr) {}
  ~InflatorRules() override;
  explicit PROTOBUF_CONSTEXPR InflatorRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InflatorRules(const InflatorRules& from);
  InflatorRules(InflatorRules&& from) noexcept
    : InflatorRules() {
    *this = ::std::move(from);
  }

  inline InflatorRules& operator=(const InflatorRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline InflatorRules& operator=(InflatorRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InflatorRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const InflatorRules* internal_default_instance() {
    return reinterpret_cast<const InflatorRules*>(
               &_InflatorRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InflatorRules& a, InflatorRules& b) {
    a.Swap(&b);
  }
  inline void Swap(InflatorRules* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InflatorRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InflatorRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InflatorRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InflatorRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InflatorRules& from) {
    InflatorRules::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InflatorRules* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bfg.proto.InflatorRules";
  }
  protected:
  explicit InflatorRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerRulesFieldNumber = 1,
  };
  // repeated .bfg.proto.LayerRules layer_rules = 1;
  int layer_rules_size() const;
  private:
  int _internal_layer_rules_size() const;
  public:
  void clear_layer_rules();
  ::bfg::proto::LayerRules* mutable_layer_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bfg::proto::LayerRules >*
      mutable_layer_rules();
  private:
  const ::bfg::proto::LayerRules& _internal_layer_rules(int index) const;
  ::bfg::proto::LayerRules* _internal_add_layer_rules();
  public:
  const ::bfg::proto::LayerRules& layer_rules(int index) const;
  ::bfg::proto::LayerRules* add_layer_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bfg::proto::LayerRules >&
      layer_rules() const;

  // @@protoc_insertion_point(class_scope:bfg.proto.InflatorRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bfg::proto::LayerRules > layer_rules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inflator_5frules_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayerRules

// uint64 layer = 1;
inline void LayerRules::clear_layer() {
  _impl_.layer_ = uint64_t{0u};
}
inline uint64_t LayerRules::_internal_layer() const {
  return _impl_.layer_;
}
inline uint64_t LayerRules::layer() const {
  // @@protoc_insertion_point(field_get:bfg.proto.LayerRules.layer)
  return _internal_layer();
}
inline void LayerRules::_internal_set_layer(uint64_t value) {
  
  _impl_.layer_ = value;
}
inline void LayerRules::set_layer(uint64_t value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:bfg.proto.LayerRules.layer)
}

// uint64 default_width = 100;
inline void LayerRules::clear_default_width() {
  _impl_.default_width_ = uint64_t{0u};
}
inline uint64_t LayerRules::_internal_default_width() const {
  return _impl_.default_width_;
}
inline uint64_t LayerRules::default_width() const {
  // @@protoc_insertion_point(field_get:bfg.proto.LayerRules.default_width)
  return _internal_default_width();
}
inline void LayerRules::_internal_set_default_width(uint64_t value) {
  
  _impl_.default_width_ = value;
}
inline void LayerRules::set_default_width(uint64_t value) {
  _internal_set_default_width(value);
  // @@protoc_insertion_point(field_set:bfg.proto.LayerRules.default_width)
}

// -------------------------------------------------------------------

// InflatorRules

// repeated .bfg.proto.LayerRules layer_rules = 1;
inline int InflatorRules::_internal_layer_rules_size() const {
  return _impl_.layer_rules_.size();
}
inline int InflatorRules::layer_rules_size() const {
  return _internal_layer_rules_size();
}
inline void InflatorRules::clear_layer_rules() {
  _impl_.layer_rules_.Clear();
}
inline ::bfg::proto::LayerRules* InflatorRules::mutable_layer_rules(int index) {
  // @@protoc_insertion_point(field_mutable:bfg.proto.InflatorRules.layer_rules)
  return _impl_.layer_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bfg::proto::LayerRules >*
InflatorRules::mutable_layer_rules() {
  // @@protoc_insertion_point(field_mutable_list:bfg.proto.InflatorRules.layer_rules)
  return &_impl_.layer_rules_;
}
inline const ::bfg::proto::LayerRules& InflatorRules::_internal_layer_rules(int index) const {
  return _impl_.layer_rules_.Get(index);
}
inline const ::bfg::proto::LayerRules& InflatorRules::layer_rules(int index) const {
  // @@protoc_insertion_point(field_get:bfg.proto.InflatorRules.layer_rules)
  return _internal_layer_rules(index);
}
inline ::bfg::proto::LayerRules* InflatorRules::_internal_add_layer_rules() {
  return _impl_.layer_rules_.Add();
}
inline ::bfg::proto::LayerRules* InflatorRules::add_layer_rules() {
  ::bfg::proto::LayerRules* _add = _internal_add_layer_rules();
  // @@protoc_insertion_point(field_add:bfg.proto.InflatorRules.layer_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bfg::proto::LayerRules >&
InflatorRules::layer_rules() const {
  // @@protoc_insertion_point(field_list:bfg.proto.InflatorRules.layer_rules)
  return _impl_.layer_rules_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bfg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inflator_5frules_2eproto

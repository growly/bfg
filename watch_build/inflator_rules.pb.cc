// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inflator_rules.proto

#include "inflator_rules.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bfg {
namespace proto {
PROTOBUF_CONSTEXPR LayerRules::LayerRules(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer_)*/uint64_t{0u}
  , /*decltype(_impl_.default_width_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerRulesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerRulesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerRulesDefaultTypeInternal() {}
  union {
    LayerRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerRulesDefaultTypeInternal _LayerRules_default_instance_;
PROTOBUF_CONSTEXPR InflatorRules::InflatorRules(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer_rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InflatorRulesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InflatorRulesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InflatorRulesDefaultTypeInternal() {}
  union {
    InflatorRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InflatorRulesDefaultTypeInternal _InflatorRules_default_instance_;
}  // namespace proto
}  // namespace bfg
static ::_pb::Metadata file_level_metadata_inflator_5frules_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_inflator_5frules_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_inflator_5frules_2eproto = nullptr;

const uint32_t TableStruct_inflator_5frules_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bfg::proto::LayerRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bfg::proto::LayerRules, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::bfg::proto::LayerRules, _impl_.default_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bfg::proto::InflatorRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bfg::proto::InflatorRules, _impl_.layer_rules_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bfg::proto::LayerRules)},
  { 8, -1, -1, sizeof(::bfg::proto::InflatorRules)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bfg::proto::_LayerRules_default_instance_._instance,
  &::bfg::proto::_InflatorRules_default_instance_._instance,
};

const char descriptor_table_protodef_inflator_5frules_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024inflator_rules.proto\022\tbfg.proto\"2\n\nLay"
  "erRules\022\r\n\005layer\030\001 \001(\004\022\025\n\rdefault_width\030"
  "d \001(\004\";\n\rInflatorRules\022*\n\013layer_rules\030\001 "
  "\003(\0132\025.bfg.proto.LayerRulesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_inflator_5frules_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_inflator_5frules_2eproto = {
    false, false, 154, descriptor_table_protodef_inflator_5frules_2eproto,
    "inflator_rules.proto",
    &descriptor_table_inflator_5frules_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_inflator_5frules_2eproto::offsets,
    file_level_metadata_inflator_5frules_2eproto, file_level_enum_descriptors_inflator_5frules_2eproto,
    file_level_service_descriptors_inflator_5frules_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_inflator_5frules_2eproto_getter() {
  return &descriptor_table_inflator_5frules_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_inflator_5frules_2eproto(&descriptor_table_inflator_5frules_2eproto);
namespace bfg {
namespace proto {

// ===================================================================

class LayerRules::_Internal {
 public:
};

LayerRules::LayerRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bfg.proto.LayerRules)
}
LayerRules::LayerRules(const LayerRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerRules* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){}
    , decltype(_impl_.default_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.layer_, &from._impl_.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_width_) -
    reinterpret_cast<char*>(&_impl_.layer_)) + sizeof(_impl_.default_width_));
  // @@protoc_insertion_point(copy_constructor:bfg.proto.LayerRules)
}

inline void LayerRules::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){uint64_t{0u}}
    , decltype(_impl_.default_width_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LayerRules::~LayerRules() {
  // @@protoc_insertion_point(destructor:bfg.proto.LayerRules)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayerRules::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerRules::Clear() {
// @@protoc_insertion_point(message_clear_start:bfg.proto.LayerRules)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.default_width_) -
      reinterpret_cast<char*>(&_impl_.layer_)) + sizeof(_impl_.default_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerRules::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 default_width = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.default_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerRules::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfg.proto.LayerRules)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_layer(), target);
  }

  // uint64 default_width = 100;
  if (this->_internal_default_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(100, this->_internal_default_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bfg.proto.LayerRules)
  return target;
}

size_t LayerRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bfg.proto.LayerRules)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_layer());
  }

  // uint64 default_width = 100;
  if (this->_internal_default_width() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_default_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerRules::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerRules::GetClassData() const { return &_class_data_; }


void LayerRules::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerRules*>(&to_msg);
  auto& from = static_cast<const LayerRules&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bfg.proto.LayerRules)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_layer() != 0) {
    _this->_internal_set_layer(from._internal_layer());
  }
  if (from._internal_default_width() != 0) {
    _this->_internal_set_default_width(from._internal_default_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerRules::CopyFrom(const LayerRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfg.proto.LayerRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerRules::IsInitialized() const {
  return true;
}

void LayerRules::InternalSwap(LayerRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerRules, _impl_.default_width_)
      + sizeof(LayerRules::_impl_.default_width_)
      - PROTOBUF_FIELD_OFFSET(LayerRules, _impl_.layer_)>(
          reinterpret_cast<char*>(&_impl_.layer_),
          reinterpret_cast<char*>(&other->_impl_.layer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerRules::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inflator_5frules_2eproto_getter, &descriptor_table_inflator_5frules_2eproto_once,
      file_level_metadata_inflator_5frules_2eproto[0]);
}

// ===================================================================

class InflatorRules::_Internal {
 public:
};

InflatorRules::InflatorRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bfg.proto.InflatorRules)
}
InflatorRules::InflatorRules(const InflatorRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InflatorRules* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_rules_){from._impl_.layer_rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bfg.proto.InflatorRules)
}

inline void InflatorRules::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InflatorRules::~InflatorRules() {
  // @@protoc_insertion_point(destructor:bfg.proto.InflatorRules)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InflatorRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_rules_.~RepeatedPtrField();
}

void InflatorRules::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InflatorRules::Clear() {
// @@protoc_insertion_point(message_clear_start:bfg.proto.InflatorRules)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InflatorRules::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bfg.proto.LayerRules layer_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InflatorRules::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfg.proto.InflatorRules)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bfg.proto.LayerRules layer_rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bfg.proto.InflatorRules)
  return target;
}

size_t InflatorRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bfg.proto.InflatorRules)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bfg.proto.LayerRules layer_rules = 1;
  total_size += 1UL * this->_internal_layer_rules_size();
  for (const auto& msg : this->_impl_.layer_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InflatorRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InflatorRules::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InflatorRules::GetClassData() const { return &_class_data_; }


void InflatorRules::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InflatorRules*>(&to_msg);
  auto& from = static_cast<const InflatorRules&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bfg.proto.InflatorRules)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layer_rules_.MergeFrom(from._impl_.layer_rules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InflatorRules::CopyFrom(const InflatorRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfg.proto.InflatorRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InflatorRules::IsInitialized() const {
  return true;
}

void InflatorRules::InternalSwap(InflatorRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layer_rules_.InternalSwap(&other->_impl_.layer_rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InflatorRules::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inflator_5frules_2eproto_getter, &descriptor_table_inflator_5frules_2eproto_once,
      file_level_metadata_inflator_5frules_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace bfg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bfg::proto::LayerRules*
Arena::CreateMaybeMessage< ::bfg::proto::LayerRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bfg::proto::LayerRules >(arena);
}
template<> PROTOBUF_NOINLINE ::bfg::proto::InflatorRules*
Arena::CreateMaybeMessage< ::bfg::proto::InflatorRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bfg::proto::InflatorRules >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
